import request from 'supertest';\nimport { createApp } from './helpers/request';\n\nconst app = createApp();\n\ndescribe('Robots API', () => {\n  it('lists empty robots initially', async () => {\n    const res = await request(app).get('/api/robots');\n    expect(res.status).toBe(200);\n    expect(Array.isArray(res.body)).toBe(true);\n    expect(res.body.length).toBe(0);\n  });\n\n  it('creates a robot and fetches health', async () => {\n    const payload = {\n      robotId: 'RB-07',\n      status: 'IDLE',\n      batteryPercent: 95,\n      location: { lat: 35.0, lng: -78.0 },\n    };\n    const res = await request(app).post('/api/robots').send(payload);\n    expect(res.status).toBe(201);\n\n    const health = await request(app).get(/api/robots//health);\n    expect(health.status).toBe(200);\n    expect(health.body.id).toBe('RB-07');\n    expect(typeof health.body.battery_pct).toBe('number');\n  });\n\n  it('updates robot status', async () => {\n    const create = await request(app)\n      .post('/api/robots')\n      .send({ robotId: 'RB-08', status: 'IDLE', batteryPercent: 50, location: { lat: 0, lng: 0 } });\n    const id = create.body.id;\n    const patch = await request(app).patch(/api/robots/).send({ status: 'EN_ROUTE' });\n    expect(patch.status).toBe(200);\n    expect(patch.body.status).toBe('EN_ROUTE');\n  });\n\n  it('returns 404 for non-existing robot', async () => {\n    const res = await request(app).get('/api/robots/nonexistent');\n    expect(res.status).toBe(404);\n  });\n});\n