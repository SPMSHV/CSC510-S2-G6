import request from 'supertest';\nimport { createApp } from './helpers/request';\n\nconst app = createApp();\n\ndescribe('Robots API - validation', () => {\n  const invalidCreate = [\n    {},\n    { robotId: 'RB-1' },\n    { status: 'IDLE' },\n    { batteryPercent: 10 },\n    { location: { lat: 0, lng: 0 } },\n    { robotId: 'RB-1', status: 'IDLE', batteryPercent: -1, location: { lat: 0, lng: 0 } },\n    { robotId: 'RB-1', status: 'X', batteryPercent: 10, location: { lat: 0, lng: 0 } },\n    { robotId: 'RB-1', status: 'IDLE', batteryPercent: 200, location: { lat: 0, lng: 0 } },\n    { robotId: 'RB-1', status: 'IDLE', batteryPercent: 10, location: { lat: 'x', lng: 0 } },\n    { robotId: 'RB-1', status: 'IDLE', batteryPercent: 10, location: { lat: 0, lng: 'y' } },\n  ];\n\n  test.each(invalidCreate.map((p, i) => [i, p]))('rejects invalid robot create %p', async (_i, payload) => {\n    const res = await request(app).post('/api/robots').send(payload as any);\n    expect(res.status).toBe(400);\n  });\n\n  const statuses = ['IDLE', 'ASSIGNED', 'EN_ROUTE', 'CHARGING', 'MAINTENANCE', 'OFFLINE'] as const;\n  test.each(statuses.map((s) => [s]))('creates robot with status %p and updates battery', async (s) => {\n    const create = await request(app)\n      .post('/api/robots')\n      .send({ robotId: RB-, status: s, batteryPercent: 50, location: { lat: 1, lng: 2 } });\n    const id = create.body.id;\n    const patch = await request(app).patch(/api/robots/).send({ batteryPercent: 75 });\n    expect(patch.status).toBe(200);\n    expect(patch.body.batteryPercent).toBe(75);\n  });\n});\n