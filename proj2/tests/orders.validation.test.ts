import request from 'supertest';\nimport { createApp } from './helpers/request';\n\nconst app = createApp();\n\ndescribe('Orders API - validation', () => {\n  const invalidPayloads = [\n    {},\n    { userId: 'u' },\n    { vendorId: 'v' },\n    { items: [] },\n    { userId: 'u', vendorId: 'v' },\n    { userId: 'u', items: [] },\n    { vendorId: 'v', items: [] },\n    { userId: 'u', vendorId: 'v', items: [], deliveryLocation: 'loc' },\n    { userId: 'u', vendorId: 'v', items: [{ name: 'x', quantity: 0, price: 1 }], deliveryLocation: 'loc' },\n    { userId: 'u', vendorId: 'v', items: [{ name: '', quantity: 1, price: 1 }], deliveryLocation: 'loc' },\n  ];\n\n  test.each(invalidPayloads.map((p, i) => [i, p]))('rejects invalid create payload %p', async (_idx, payload) => {\n    const res = await request(app).post('/api/orders').send(payload as any);\n    expect(res.status).toBe(400);\n  });\n\n  const baseValid = {\n    userId: 'user-1',\n    vendorId: 'vendor-1',\n    items: [\n      { name: 'A', quantity: 1, price: 1 },\n      { name: 'B', quantity: 2, price: 2 },\n    ],\n    deliveryLocation: 'loc',\n  };\n\n  const statuses = ['CREATED', 'PREPARING', 'READY', 'ASSIGNED', 'EN_ROUTE', 'DELIVERED', 'CANCELLED'] as const;\n\n  test('can transition through multiple statuses', async () => {\n    const create = await request(app).post('/api/orders').send(baseValid);\n    const id = create.body.id;\n    for (const s of statuses) {\n      const res = await request(app).patch(/api/orders/).send({ status: s });\n      expect(res.status).toBe(200);\n      expect(res.body.status).toBe(s);\n    }\n  });\n\n  const invalidStatuses = ['NEW', '', null, 123, {}, []];\n  test.each(invalidStatuses.map((s, i) => [i, s]))('rejects invalid status %p', async (_i, badStatus) => {\n    const create = await request(app).post('/api/orders').send(baseValid);\n    const id = create.body.id;\n    const res = await request(app).patch(/api/orders/).send({ status: badStatus as any });\n    expect(res.status).toBe(400);\n  });\n\n  // Generate a bunch of small valid-create tests (counts towards test total)\n  const totals = Array.from({ length: 30 }).map((_, i) => i + 1);\n  test.each(totals.map((n) => [n]))('creates order variant #%p', async (n) => {\n    const res = await request(app)\n      .post('/api/orders')\n      .send({\n        userId: 'u-' + n,\n        vendorId: 'v-' + n,\n        items: [\n          { name: 'Item-' + n, quantity: 1 + (n % 3), price: 1.25 * (1 + (n % 4)) },\n        ],\n        deliveryLocation: 'B-' + n,\n      });\n    expect(res.status).toBe(201);\n    expect(typeof res.body.total).toBe('number');\n  });\n});\n