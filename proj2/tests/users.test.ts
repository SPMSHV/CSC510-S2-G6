import request from 'supertest';\nimport { createApp } from './helpers/request';\n\nconst app = createApp();\n\ndescribe('Users API', () => {\n  it('lists empty users initially', async () => {\n    const res = await request(app).get('/api/users');\n    expect(res.status).toBe(200);\n    expect(Array.isArray(res.body)).toBe(true);\n    expect(res.body.length).toBe(0);\n  });\n\n  it('creates a user', async () => {\n    const res = await request(app)\n      .post('/api/users')\n      .send({ email: 'student@university.edu', name: 'Student', role: 'STUDENT' });\n    expect(res.status).toBe(201);\n    expect(res.body.email).toBe('student@university.edu');\n  });\n\n  it('rejects invalid user', async () => {\n    const res = await request(app).post('/api/users').send({});\n    expect(res.status).toBe(400);\n  });\n\n  it('updates a user', async () => {\n    const create = await request(app)\n      .post('/api/users')\n      .send({ email: 'eng@university.edu', name: 'Eng', role: 'ENGINEER' });\n    const id = create.body.id;\n    const patch = await request(app).patch(/api/users/).send({ name: 'Engineer' });\n    expect(patch.status).toBe(200);\n    expect(patch.body.name).toBe('Engineer');\n  });\n\n  it('returns 404 for non-existing user', async () => {\n    const res = await request(app).get('/api/users/nonexistent');\n    expect(res.status).toBe(404);\n  });\n});\n